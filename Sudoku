#Define a procedure, check_sudoku, that takes as input a square list of lists representing an n x n sudoku puzzle solution and returns the boolean True if the input is a valid sudoku square and returns the boolean False otherwise.
#A valid sudoku square satisfies these two properties:
#Each column of the square contains each of the whole numbers from 1 to n exactly once.
#Each row of the square contains each of the whole numbers from 1 to n exactly once.
#You may assume that the input is square and contains at least one row and column.

correct = [[1,2,3],
           [2,3,1],
           [3,1,2]]

incorrect = [[1,2,3,4],
             [2,3,1,3],
             [3,1,2,3],
             [4,4,4,4]]

incorrect2 = [[1,2,3,4],
             [2,3,1,4],
             [4,1,2,3],
             [3,4,1,2]]

incorrect3 = [[1,2,3,4,5],
              [2,3,1,5,6],
              [4,5,2,1,3],
              [3,4,5,2,1],
              [5,6,4,3,2]]

incorrect4 = [['a','b','c'],
              ['b','c','a'],
              ['c','a','b']]

incorrect5 = [ [1, 1.5],
               [1.5, 1]]
               
# Define a function check_sudoku() here:
def check_sudoku(correct):
    sudoku = correct
    #Create a list with int from 1-9
    
    print (sudoku)
    
    no_of_rows = len(sudoku)
    for row in sudoku:
        #Check if it is a square matrix
        if (len(row) != no_of_rows):
            print ("Not a square matrix")
            return False
        check_list = [x for x in range(1,10)]
        for elem in row:
            
            #if ((elem<1 and elem>9) or (isinstance(elem,int))==False):
            #    print ("Element not an int or does not fall between 1-9")
            #    return False
            
            if (elem not in check_list):
                return False
            check_list.remove(elem)
            
            print(check_list)
